<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.powerboot.dao.FinancialProductDao">

	<select id="getById" resultType="com.powerboot.domain.FinancialProductDO">
		select `id`,`name`,`day_rate`,`year_rate`,`lock_days`,`start_amount`,`top_amount`,`total_amount`,`start_vip`,
		`called_rate`,`level`,`create_time`,`update_time`
		from financial_product where id = #{id}
	</select>

	<select id="getByParams" resultType="com.powerboot.domain.FinancialProductDO">
		select
        `id`,
        `name`,
        `day_rate`,
        `year_rate`,
        `lock_days`,
        `start_amount`,
        `top_amount`,
        `total_amount`,
        `start_vip`,
        `called_rate`,
        `level`,
        `create_time`,
        `update_time`
        from financial_product
        <where>
            <trim suffixOverrides=",">
                <include refid="condition_sql"/>
            </trim>
        </where>
        <if test="param.sort != null">
            order by ${param.sort}
        </if>
		<if test="param.offset != null and param.limit != null">
			limit ${param.offset}, ${param.limit}
		</if>
        <if test="param.offset == null and param.limit != null">
            limit ${param.limit}
        </if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from financial_product
        <where>
            <trim suffixOverrides=",">
                <include refid="condition_sql"/>
            </trim>
        </where>
	</select>
	 
	<insert id="save" parameterType="com.powerboot.domain.FinancialProductDO">
		insert into financial_product
        (`id`,`name`,`day_rate`,`year_rate`,`lock_days`,`start_amount`,`called_rate`,`level`,`create_time`,`update_time`                  )
		values
		(#{id},#{name},#{dayRate},#{yearRate},#{lockDays},#{startAmount},#{calledRate},#{level},#{createTime},#{updateTime}                  		)
	</insert>

    <insert id="saveBatch" useGeneratedKeys="true">
        insert into financial_product
        (`id`,`name`,`day_rate`,`year_rate`,`lock_days`,`start_amount`,`called_rate`,`level`,`create_time`,`update_time`                          )
        values
        <foreach collection="list" item="item" index="index" separator=",">
        (#{item.id},#{item.name},#{item.dayRate},#{item.yearRate},#{item.lockDays},#{item.startAmount},#{item.calledRate},#{item.level},#{item.createTime},#{item.updateTime}                          )
		</foreach>
    </insert>

	<update id="update">
		update financial_product 
		<set>
                       <if test="entity.name != null">`name` = #{entity.name}, </if>
               <if test="entity.dayRate != null">`day_rate` = #{entity.dayRate}, </if>
               <if test="entity.yearRate != null">`year_rate` = #{entity.yearRate}, </if>
               <if test="entity.lockDays != null">`lock_days` = #{entity.lockDays}, </if>
               <if test="entity.startAmount != null">`start_amount` = #{entity.startAmount}, </if>
               <if test="entity.calledRate != null">`called_rate` = #{entity.calledRate}, </if>
               <if test="entity.level != null">`level` = #{entity.level}, </if>
               <if test="entity.createTime != null">`create_time` = #{entity.createTime}, </if>
               <if test="entity.updateTime != null">`update_time` = #{entity.updateTime}</if>
                    		</set>
        <where>
            <trim suffixOverrides=",">
                <include refid="condition_sql"/>
            </trim>
        </where>
	</update>

    <sql id="condition_sql">
        <trim suffixOverrides="AND | OR">
                    <if test="param.id != null"> and id = #{param.id} </if>
                    <if test="param.name != null"> and name = #{param.name} </if>
                    <if test="param.dayRate != null"> and day_rate = #{param.dayRate} </if>
                    <if test="param.yearRate != null"> and year_rate = #{param.yearRate} </if>
                    <if test="param.lockDays != null"> and lock_days = #{param.lockDays} </if>
                    <if test="param.startAmount != null"> and start_amount = #{param.startAmount} </if>
                    <if test="param.calledRate != null"> and called_rate = #{param.calledRate} </if>
                    <if test="param.level != null"> and level = #{param.level} </if>
                    <if test="param.createTime != null"> and create_time = #{param.createTime} </if>
                    <if test="param.updateTime != null"> and update_time = #{param.updateTime} </if>
                </trim>
    </sql>

</mapper>